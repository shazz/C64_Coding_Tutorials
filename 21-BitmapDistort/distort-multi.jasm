!let debug = 0
; ------------------------------------------------------------------------------------------
; Generic Macros
; ------------------------------------------------------------------------------------------
!include "../macros/macros.jasm"

; ------------------------------------------------------------------------------------------
; Specific Macros
; ------------------------------------------------------------------------------------------
; Declare zero-page offset helper
!let zp = {
	xsintab_counter:    $03, 
}

; ------------------------------------------------------------------------------------------
; Plugins
; ------------------------------------------------------------------------------------------
!use "../macros/utils" as utils
!use "../macros/maths" as maths
!use "../macros/sid"   as sid_loader

; ------------------------------------------------------------------------------------------
; Segments and VIC II setup
; ------------------------------------------------------------------------------------------

; $0801 Start
; $1000 Music
; $2000 Init
; $2300 IRQ
; $2e00 Routines
; $3000 Tables
; $4000 VIC II data ($4000 - $7FFF)
;  + $0000-$1200 big sprites sprites (has to be aligned on 64 bytes)  (4608 bytes)
;  + $1c00-$1FFF screen memory (tiles, written once)                  (1024 bytes)
;  + $2000-$27FF charset (has to be at CHAR_VIC_MEM_ADDR)             (2048 bytes, first 5 bytes used only)
;  + $2800-$37c0 font sprites (has to be aligned on 64 bytes)         (4032 bytes, 2112 bytes remaining in VIC memory + 2043 bytes of unused char mem)
; $8000-$b200 precomputed charset data                                (12800 bytes)

!let SCR_VIC_MEM_ADDR       = $0000 ; where tiles will be set one time
!let BITMAP_VIC_MEM_ADDR    = $2000 ; not used here
!let CHAR_VIC_MEM_ADDR      = $2000 ; where charset will be copied

!let BANK_ADDR              = $4000 ; this means all gfx data should be between $4000 and $7FFF
!let SCR_MEM                = BANK_ADDR+SCR_VIC_MEM_ADDR
!let BITMAP_MEM             = BANK_ADDR+BITMAP_VIC_MEM_ADDR

!let SEGMENT_INIT           = $2000
!let SEGMENT_IRQ            = $2300
!let SEGMENT_ROUTINES       = $2e00
!let SEGMENT_TABLES         = $3000
; ------------------------------------------------------------------------------------------
; Variables
; ------------------------------------------------------------------------------------------
!let sid = sid_loader("data/Meetro.sid")
!!utils.debug(sid)

; sprite X sine movement
!let SINX_LEN = 60
!let SINX_SCALE = 30
!let SINX_PAD = 80

; ------------------------------------------------------------------------------------------
; Program
; ------------------------------------------------------------------------------------------
+basic_start(entry)

;--------------------------------------------------------------
; Execution starts here
;--------------------------------------------------------------
entry: {
    jsr init_vic
    jsr init_bitmap
    jsr init_system

forever: 
    jmp forever                                             ; at this point, only IRQs do something
}

; ------------------------------------------------------------------------------------------
; Segment $1000: music driver and data
; ------------------------------------------------------------------------------------------
* = sid.startAddress
music:  !byte sid.data
end_music:
!!utils.debug(["MUSIC code from", maths.int_to_hex(sid.startAddress), "to", maths.int_to_hex(*), (*-sid.startAddress), "bytes"])

; ------------------------------------------------------------------------------------------
; Segment Init
; ------------------------------------------------------------------------------------------
* = SEGMENT_INIT
init_vic: {
    +setup_banks(BANK_ADDR)                         ; set VIC bank
    !!utils.debug(["Setting VIC memory", "BITMAP_VIC_MEM_ADDR", maths.int_to_hex(BITMAP_VIC_MEM_ADDR), "CHAR_VIC_MEM_ADDR", maths.int_to_hex(CHAR_VIC_MEM_ADDR), "SCR_VIC_MEM_ADDR", maths.int_to_hex(SCR_VIC_MEM_ADDR)])
    
    +setup_vic_memory(BITMAP_VIC_MEM_ADDR, CHAR_VIC_MEM_ADDR, SCR_VIC_MEM_ADDR)  
    !!utils.debug(["Bitmap at", maths.int_to_hex(BITMAP_MEM), "screen mem at", maths.int_to_hex(SCR_MEM)]) 

    +clear_screen({"clearByte": $20, "screen": SCR_MEM, usePtr: FALSE})

    rts
}

init_bitmap: {

    ; copy/shift the bitmap screen memory on 4 screen locations
    !for i in range(4) {
    copy_screen_ram:
        lda bitmap_scr,x	                            ; load charmem + x to a
        sta SCR_MEM+(i*$400),x	       
        lda bitmap_scr+$100,x	        
        sta SCR_MEM+(i*$400)+$100,x
        lda bitmap_scr+$200,x
        sta SCR_MEM+(i*$400)+$200,x
        lda bitmap_scr+$300,x 
        sta SCR_MEM+(i*$400)+$300,x


        load bitmap_data,x
        sta BITMAP_MEM

        inx
        bne copy_screen_ram
    }

copy_color_ram:
    lda bitmap_col,x                                ; copy colormem + x to $d800 Color RAM (1000 bytes, only bits #0-#3).
    sta $d800,x
    lda bitmap_col+$100,x 
    sta $d900,x
    lda bitmap_col+$200,x 
    sta $da00,x
    lda bitmap_col+$300,x 
    sta $db00,x

    inx
    bne copy_color_ram
  
    rts

}

init_system: {

    sei
    lda #$35        			                    ; Bank out kernal and basic
    sta $01         			                    ; $e000-$ffff

    ; init music
	lda #0
	tax			
	tay			
    jsr sid.init	; jump to sid player init

    lda #0
    sta zp.xsintab_counter

    +setup_irq(bitmap_irq, 50)
    cli							                    ; set up irq to replace the kernal IRQ   

    rts
}

!!utils.debug(["INIT code from", maths.int_to_hex(SEGMENT_INIT), "to", maths.int_to_hex(*), (*-SEGMENT_INIT), "bytes"])


; ------------------------------------------------------------------------------------------
; IRQs
; ------------------------------------------------------------------------------------------
* = SEGMENT_IRQ
; this stable IRQ will be repeated / modified for each row of sprite (+1 to clear), then setup the next
bitmap_irq: { 
    +double_irq(end, irq_stable)                        ; setting the stable IRQ needs 2 rasterlines

irq_stable:
    txs                                                 ; we're now at cycle 25 (+/- jitter) after txs
    +waste_cycles(33)

    +cpu_time_start()
    !for i in range(200) {


    }
    
    +irq_end(bitmap_irq, 50, TRUE) 
end:

}


!!utils.debug(["IRQ code from", maths.int_to_hex(SEGMENT_IRQ), "to", maths.int_to_hex(*), (*-SEGMENT_IRQ), "bytes"])


; ------------------------------------------------------------------------------------------
; Segment: Charset IRQ and routines
; ------------------------------------------------------------------------------------------
* = SEGMENT_ROUTINES


!!utils.debug(["ROUTINES code from", maths.int_to_hex(SEGMENT_ROUTINES), "to", maths.int_to_hex(*), (*-SEGMENT_ROUTINES), "bytes"])

; ------------------------------------------------------------------------------------------
; Segment $4400: Tables
; ------------------------------------------------------------------------------------------
* = SEGMENT_TABLES

; current charset displayed
current_ptr: !byte 0

!let xsinvals = maths.sintab(SINX_LEN, SINX_SCALE)
xsintab:
!for v in xsinvals {
    ; !!utils.debug([Math.round(SINX_PAD+v)])
    !byte Math.round(SINX_PAD+v)
}
end_xsintab:

bitmap_scr: !binary "data/face.scr"

!!utils.debug(["TABLES data from", maths.int_to_hex(SEGMENT_TABLES), "to", maths.int_to_hex(*), (*-SEGMENT_TABLES), "bytes"])

; ------------------------------------------------------------------------------------------
; Segment as to be visible from selected VIC bank
; ------------------------------------------------------------------------------------------
* = BANK_ADDR+$0000
; sprite_data: !binary desc.datafile
!!utils.debug(["BIG SPRITE data from", maths.int_to_hex(BANK_ADDR+$0000), "to", maths.int_to_hex(*), (*-BANK_ADDR+$0000), "bytes"])

* = BANK_ADDR+CHAR_VIC_MEM_ADDR
; current_charset: !fill CHARSET_WIDTH, 0
!!utils.debug(["Current CHARSET DATA from", maths.int_to_hex(BANK_ADDR+CHAR_VIC_MEM_ADDR), "to", maths.int_to_hex(*), (*-BANK_ADDR+CHAR_VIC_MEM_ADDR), "bytes"])

* = BANK_ADDR+CHAR_VIC_MEM_ADDR+$800
; fonts_sprite_data: !binary fonts_spr.datafile 
!!utils.debug(["SPRITE FONTS data from", maths.int_to_hex(BANK_ADDR+CHAR_VIC_MEM_ADDR+$800), "to", maths.int_to_hex(*), (*-BANK_ADDR+CHAR_VIC_MEM_ADDR+$800), "bytes"])

; ------------------------------------------------------------------------------------------
; Segment: bitmap data
; ------------------------------------------------------------------------------------------
* = $8000
bitmap_data: !binary "data/face.map" 
!!utils.debug(["CHARSET data from", maths.int_to_hex($8000), "to", maths.int_to_hex(*), (*-$8000), "bytes"])
