!let debug = 0
!let use_sparkle = 1
!let low_border_strech = 1

; ------------------------------------------------------------------------------------------
; Generic Macros
; ------------------------------------------------------------------------------------------
!include "../../macros/macros.jasm"
!include "../../macros/sequencer.jasm"

; ------------------------------------------------------------------------------------------
; Specific Macros
; ------------------------------------------------------------------------------------------
; Declare zero-page offset helper
!let zp = {
	table_ptr:       2,   ; 1 byte
    curr_sprite:     3,   ; 1 byte
    d017_table:      4,   ; D017_TABLE_LEN bytes (around 40 bytes) 
}

; ------------------------------------------------------------------------------------------
; Plugins
; ------------------------------------------------------------------------------------------
!use "../../macros/maths" as maths
!use "../../macros/utils" as utils
!use "../../macros/spd" as spd
!use "../../macros/sid" as sid_loader

; ------------------------------------------------------------------------------------------
; Segments and VIC II setup
; ------------------------------------------------------------------------------------------
!let parts = loadJson("../parts.json")
!let SEGMENT_INIT           = parts.part_multiplexer.seg_init
!let SEGMENT_IRQ            = parts.part_multiplexer.seg_irq 
!let SEGMENT_SPRITES		= parts.part_multiplexer.seg_sprites
!let SEGMENT_TABLES			= parts.part_multiplexer.seg_tables

!let VIC_FRAME = {             
    bank        : $0000,        
    bitmap_mem  : $2000,        
    scr_mem     : $0400,
    char_mem    : $2000
}
; ------------------------------------------------------------------------------------------
; Variables
; ------------------------------------------------------------------------------------------
!let SPRITES_NB = 8
!let CUBES_SPRITES_NB = 10

!let PERIOD = 11
!let SIN_SCALE = 7
!let TOP_POS = 24
!let D017_TABLE_LEN = 35
!!utils.debug(["D017_TABLE_LEN", D017_TABLE_LEN, "SINE SCALE", 21+SIN_SCALE])

!let FULLSCREEN_COLOR = color.blue

!let cubes_spd = spd("data/cubes.spd")
!let sid = sid_loader("../sequencer/data/music.sid")

!let SPEED_X = 3
!let WIDTHS = [432, 432, 432, 416]
!let SCREEN_WIDTH = WIDTHS[SPEED_X-1] ; has to be divided by speed*8
!let NB_POS = SCREEN_WIDTH / 8
!let NB_POS_PER_SPRITE = NB_POS / SPEED_X

!let UPDATE_IRQ = 247

; ------------------------------------------------------------------------------------------
; Memory locations managed by Sparkle
; ------------------------------------------------------------------------------------------
!let sprites_data  = SEGMENT_SPRITES ; Segment $2000: charsets banks

; ------------------------------------------------------------------------------------------
; Program
; ------------------------------------------------------------------------------------------
_PRG_START_:
+basic_start(entry)

;--------------------------------------------------------------
; Execution starts here
;--------------------------------------------------------------
entry: { 
    jsr init                                        ; relocated in another segment else music doesn't fit

    !if (use_sparkle == FALSE) {
        jmp *
    }
    rts
}

; ------------------------------------------------------------------------------------------
; INIT
; ------------------------------------------------------------------------------------------
* = SEGMENT_INIT
_SEG_INIT_START_:

init: { 

    lda #FULLSCREEN_COLOR                ; set borders and window to black
    sta vic.border_col

    lda #FULLSCREEN_COLOR
    sta vic.bck_col

	+setup_vic_bank(VIC_FRAME.bank)
	+setup_vic_memory(VIC_FRAME.bitmap_mem, VIC_FRAME.char_mem, VIC_FRAME.scr_mem)

    +clear_screen({"clearByte": $20, "screen": $0400, usePtr: FALSE})

    lda #$18                     ; $18 = 00011000, $8: idle mode
    sta vic.scr_ctrl            ; set screen control: no vertical scroll, 25 rows, bitmap mode

    +vsync()

!if (use_sparkle == FALSE) {
    sei
    lda #$35        			                    ; Bank out kernal and basic
    sta $01         			                    ; $e000-$ffff

	lda #0
	tax			
	tay			
    jsr sid.init	                                ; jump to sid player init
}

    lda #2
    sta zp.table_ptr

	lda #0
	; sta vic.border_col
	; sta vic.bck_col
    sta vic.sprite_dblx  	    ; no double width
    sta vic.sprite_dblh			; no double height
	sta vic.sprite_pri			; no priority
    sta zp.curr_sprite          ; set current sprite as the first one

    ; set sprite default coords
    !for i in range(SPRITES_NB) {
        sta vic.sprite0_x+i
        sta vic.sprite0_y+i
    }

	  ; set sprites color mode
	lda #(1<<SPRITES_NB)-1
	sta vic.sprite_colmode

    ; set sprites specific color
    !for i in range(SPRITES_NB) {
        lda #cubes_spd.colors[0]
        sta vic.sprite0_color+i         ; set main sprite color
    }

    ; set extra colors
    ; lda #CUBES_SPD.multicol1		
    lda #$e
    sta vic.sprite_extra_col1

    lda #cubes_spd.multicol2
    sta vic.sprite_extra_col2
   
    ; set sprites pointers
    lda #sprites_data/64		        ; a = $80 (128) to set sprite pointer to $2000, see next line
    !for i in range(SPRITES_NB) {
		sta VIC_FRAME.scr_mem + $3f8 + i 
    }

    ; now enable fully initialized sprites
    lda #(1<<SPRITES_NB)-1	; set one bit per sprite
    sta vic.sprite_en

    jsr clear_d017_table  

	+setup_irq(update_irq, UPDATE_IRQ, FALSE)

    cli

    rts
}
_SEG_INIT_END_:
!!utils.debug(["INIT code from", maths.int_to_hex(_SEG_INIT_START_), "to", maths.int_to_hex(*), (*-_SEG_INIT_START_), "bytes"])

; ------------------------------------------------------------------------------------------
; Music
; ------------------------------------------------------------------------------------------
!if (use_sparkle == FALSE) {

	* = sid.startAddress
	music:  !byte sid.data
	!!utils.debug(["MUSIC driver from", maths.int_to_hex(sid.startAddress), "to", maths.int_to_hex(*), (*-sid.startAddress), "bytes"])
}

; ------------------------------------------------------------------------------------------
; Sprites Data
; ------------------------------------------------------------------------------------------
* = SEGMENT_SPRITES
!binary "data/cubes.bin"
!!utils.debug(["SPRITES data from", maths.int_to_hex(SEGMENT_SPRITES), "to", maths.int_to_hex(*), (*-SEGMENT_SPRITES), "bytes"])

; ------------------------------------------------------------------------------------------
; IRQ
; ------------------------------------------------------------------------------------------
* = SEGMENT_IRQ
_SEG_IRQ_START_:
; ------------------------------------------------------------------------------------------
; strecher irq
; At rasterline Y_Sprite - 1, set the double irq, take ? cycles to setup
; ------------------------------------------------------------------------------------------
irq_strecher: {
    +double_irq(end, stable_irq)

stable_irq:
    txs                     ; 2 restore the stack pointer

    lda #(1<<SPRITES_NB)-1	; set one bit per sprite
	sta vic.sprite_en
 
    +waste_cycles(57)
    +waste_cycles(9)

!let NB_ROWS = 6
!for row in range(NB_ROWS) {
    start_strecher:
        ldy #0                  ; we should be at cycle $10 of the rasterline 15
        ldx #0
    raster:       
        sty $d017               ; 4 set Y-stretch to false
        lda zp.d017_table,x     ; set Y-stretch to true for selected sprites
        sta $d017
        lda d011_table + 0,x
        bit $ea
        nop
        nop
        dec $d016               ; open side border and do FLD to inhibit
        nop
        nop
        inc $d016
        inx
        cpx #D017_TABLE_LEN
        bne raster   

    cont:
        !if (row != NB_ROWS-1) {
            ldy #TOP_POS+((row+1)*(D017_TABLE_LEN+2))
            !for i in range(SPRITES_NB) {
                sty vic.sprite0_y+(i*2)		; set sprite #i Y-coordinate to new offsets    
            }
            +waste_cycles(62)
        }
        !if (row == NB_ROWS-1) {
            ldy #249
            !for i in range(SPRITES_NB) {
                sty vic.sprite0_y+(i*2)		; set sprite #i Y-coordinat
            } 
        }
    }

finish_irq:
    +irq_end(update_irq, UPDATE_IRQ, TRUE)
end:
}


; ------------------------------------------------------------------------------------------
; irq
; ------------------------------------------------------------------------------------------

update_irq: {
    +double_irq(end, stable_update_irq)

stable_update_irq:
    txs                     ; 2 restore the stack pointer

    ; lda vic.scr_ctrl        ; no need to be fine, we know it shoulf be 0
    ; and #$f7
    lda #0
	sta vic.scr_ctrl

!if (low_border_strech == TRUE) {
    +waste_cycles(61) 

    ; last row
    ldy #0                  ; we should be at cycle $10 of the rasterline 15
    ldx #0
raster:       
    sty $d017               ; set Y-stretch to false
    lda zp.d017_table,x     ; set Y-stretch to true for selected sprites
    sta $d017
    lda d011_table + 0,x
    bit $ea
    nop
    nop
    dec $d016               ; open side border and do FLD to inhibit
    ; sta vic.scr_ctrl               ; bad lines
    nop
    nop
    inc $d016
    inx
    cpx #D017_TABLE_LEN
    bne raster   
}

	lda #0
	sta vic.sprite_en
    ; update all!

    dec zp.table_ptr 
    lda zp.table_ptr 
    cmp #0
    bpl cont
    lda #NB_POS_PER_SPRITE-1
cont:
    sta zp.table_ptr 

    ldy zp.table_ptr
    !for i in range(SPRITES_NB) {
        ; set x lsb
        lda x_positions_table_lsb+(i*NB_POS_PER_SPRITE), y
        sta vic.sprite0_x+(i*2)
    }

set_msb:
    lda x_positions_table_msb+(7*NB_POS_PER_SPRITE), y		; get msb7 [6,5,4,3,2,1,0] 
	!for i in utils.reverse(range(SPRITES_NB-1)) { 	
		asl							; msb << 1
		ora x_positions_table_msb+(i*NB_POS_PER_SPRITE), y	; or with msb-1
	}
	sta vic.sprites_x

set_sprite_ptr:
    ldx zp.curr_sprite                  ; set current sprite pointers

    !for i in range(SPRITES_NB) {
        lda spr_pointers+i, x
		sta VIC_FRAME.scr_mem + $3f8 + i 	   
    }
    inx
    txa
    cmp #CUBES_SPRITES_NB*2
    bne no_rest_ptr
    lda #0
no_rest_ptr:
    sta zp.curr_sprite

    lda #TOP_POS                      ; set default sprite Y position at the top, strecher will place them accordingly
    !for i in range(SPRITES_NB) {
        sta vic.sprite0_y+(i*2)		    ; set sprite #i Y-coordinate to 128    
    }

    jsr clear_d017_table
    jsr update_d017_table

!if (use_sparkle) {
    jsr parts.music.play
} else {
	+cpu_time_start()
	jsr sid.play
	+cpu_time_stop()
}

    +check_part_fc(parts.part_multiplexer.duration, parts.sequencer.frame_counter, display)

    lda #1
    sta parts.sequencer.part_done
    
    lda #0                  ; stop interrupt maybe a little rough :)
    ; sta $d01A             ; if really the end...
    asl $d019  
    jmp update_irq::end-7

display:
    +inc_part_fc(parts.sequencer.frame_counter)   

    lda #$0b                ; set IDLE mode
    sta vic.scr_ctrl    

    +irq_end(irq_strecher, TOP_POS-2, TRUE) 
end:
}

; ------------------------------------------------------------------------------------------
; data
; ------------------------------------------------------------------------------------------
; Values for vic.scr_ctrl in the stretcher
d011_table:
    !for i in range(D017_TABLE_LEN) {
        !byte i & 7 | $10
    }

sintab:
!for i in range(SCREEN_WIDTH) { 
    !let sine = Math.round(SIN_SCALE*Math.sin(i/SCREEN_WIDTH * PERIOD * Math.PI * 2.0))
    !byte SIN_SCALE+sine
    ; !!utils.debug([i, sine, 1+SIN_SCALE+sine])
}
end_sintab:
    
spr_pointers:
!for i in range(CUBES_SPRITES_NB*2) {
    !byte sprites_data/64+(i % CUBES_SPRITES_NB)
    !byte sprites_data/64+(i % CUBES_SPRITES_NB)
}

x_positions_table_lsb:
!for s in range(SPRITES_NB) {
    !let step = -24 + (s*NB_POS)
    !for x in range(NB_POS_PER_SPRITE) {
        !let val = 0
        !if (step < 0) {
            val = 479 + step + 24
        } else {
            val = step
        }
        !byte val & $0ff
        ; !!utils.debug(["sprite", s, x, val, val & $0ff])
        step = step + SPEED_X
    }
}
x_positions_table_msb:
!for s in range(SPRITES_NB) {
    !let step = -24 + (s*NB_POS)
    !for x in range(NB_POS_PER_SPRITE) {
        !let val = 0
        !if (step < 0) {
            val = 479 - step - 24
        } else {
            val = step
        }
        !byte (val & $100) >> 8
        ; !!utils.debug(["sprite msb", s, x, val, (val & $100) >> 8])
        step = step + SPEED_X
    }
}

; ------------------------------------------------------------------------------------------
; Update the $d017 'stretcher' table
;
; This is what creates the D.Y.S.P. effect
;
; For each sprite, we get its Y-position and mask out the proper bits in the
; $d017 table. We only mask out bits for 19 lines, line 0 and line 20 are
; always stretched to keep the timing in the loop constant
; ------------------------------------------------------------------------------------------
update_d017_table: {
    +cpu_time_set_color(color.red)
    
    !for i in range(SPRITES_NB) {	    ; => 8*(160+5) = 1320 cycles (21 lines)
        ; set x lsb
        ldy zp.table_ptr
        lda sintab+(i*NB_POS_PER_SPRITE), y
        tay    
        ldx #(255 - (1 << i))           ; 2
        !for l in range(20) {	        ; 
            lda zp.d017_table+l, y	    ; 4
            sax zp.d017_table+l, y	    ; 4 => 8*20 = 160 cycles cycles
        }
    }   

    +cpu_time_set_color(FULLSCREEN_COLOR)
    rts
}

; ------------------------------------------------------------------------------------------
; Clear the $d017 'stretcher' table by storing $ff in it
;
; We later mask out bits in this table with the $d017 update routine
; ------------------------------------------------------------------------------------------
clear_d017_table: {
    +cpu_time_start()
    lda #$ff                    ; 2

    !for i in range(D017_TABLE_LEN*2) {
        sta zp.d017_table+i     ; 4
    }                           ; total: 4*40 + 2 = 162 cycles (3 lines), ram: 64*3+2 = 194 bytes

    +cpu_time_stop()
    rts 
}
!!utils.debug(["IRQ", maths.int_to_hex(_SEG_IRQ_START_), "to", maths.int_to_hex(*), (*-_SEG_IRQ_START_), "bytes / start", maths.int_to_hex(_SEG_IRQ_START_-_PRG_START_)])
_SEG_IRQ_END_:
; ------------------------------------------------------------------------------------------
; End of Code
; ------------------------------------------------------------------------------------------
