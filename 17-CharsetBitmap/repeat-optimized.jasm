!let debug = 1
; ------------------------------------------------------------------------------------------
; Generic Macros
; ------------------------------------------------------------------------------------------
!include "../macros/macros.jasm"

; ------------------------------------------------------------------------------------------
; Specific Macros
; ------------------------------------------------------------------------------------------
; Declare zero-page offset helper
!let zp = {
    charset_loptr: $FB,   ; 1 byte
    charset_hiptr: $FC,   ; 1 byte
    charset_ptr: $FD
}

; ------------------------------------------------------------------------------------------
; Plugins
; ------------------------------------------------------------------------------------------
!use "../macros/maths" as maths
!use "../macros/utils" as utils
!use "../macros/spd" as spd

; ------------------------------------------------------------------------------------------
; Variables
; ------------------------------------------------------------------------------------------
!let NB_CHARSETS = 40
!let CHARSET_WIDTH = 5
!let CHARSET_HEIGHT = 4
!let CHARSET_SIZE = CHARSET_WIDTH*CHARSET_HEIGHT*8
!let UPDATE_CHARSET_RASTERLINE = 250
; ------------------------------------------------------------------------------------------
; Program
; ------------------------------------------------------------------------------------------
+basic_start(entry)
;--------------------------------------------------------------
; Execution starts here
;--------------------------------------------------------------
entry: { 

    ; lda #$35                  ; Bank out kernal and basic
    ; sta $01                   ; $e000-$ffff

    lda vic.scr_ctrl2           ; activate multicolor mode
    ora #16                     ; set bit 4 to 1
    sta vic.scr_ctrl2

    +clear_screen({"clearByte": $20, "screen": $0400, usePtr: FALSE})

    lda #<charsets
    sta zp.charset_loptr
    lda #>charsets
    sta zp.charset_hiptr
    lda #0
    sta zp.charset_ptr

    jsr update_charset
    
    lda charcolors+0
    sta vic.bck_col         ; set window color to charset transparent color
    sta vic.border_col      ; set border color to charset transparent color

    lda #5          
    sta vic.border_col      ; debug

    lda charcolors+1
    sta vic.back_extra_col1

    lda charcolors+2
    sta vic.back_extra_col2

    lda #$18                ; a = $18 = 0001 100 0
    sta vic.mem_setup       ; set Memory setup register to char memory 4 (3 bits $2000-$27FF,) screen memory to 1 ($0400-$07FF)


!for y in range(7) {        ; copy 25 lines (only copy the first line for line 25)
    ldx #0
copy_line:  
    !if (y != 6) {
        !for i in range(4) {
            lda screencodes+(i*40),x
            sta $0400+(i*40)+(y*160),x
        }
    } else {
        !for i in range(1) {
            lda screencodes+(i*40),x
            sta $0400+(i*40)+(y*160),x
        }
    }

    inx
    cpx #40
    bne copy_line
}

+clear_screen({ screen: $d800, clearByte: charcolors+3, usePtr: TRUE})

loop:
    lda vic.raster_line
    cmp #UPDATE_CHARSET_RASTERLINE
    beq update
    jmp loop

update:
    clc
    lda current_ptr
    adc #>charsets                      ; the msb is enough

!for i in range(CHARSET_SIZE/32) {
    sta update_charset::start+(i*6)+2       ;self-mods only need HB's set
}
    ldx current_ptr
    inx            
    cpx #NB_CHARSETS

    bne no_reset
    ldx #0
no_reset:
    stx current_ptr

    +cpu_time_start()
    jsr update_charset
    +cpu_time_stop()
    jmp loop    
}

update_charset: {
    ldy #31
start:  
!for i in range(CHARSET_SIZE/32) { 
    lda $ee00+(i*32),y              ;copy charset_width bytes in 32 loops
    sta current_charset+(i*32),y
}
    dey
    bpl start
    rts
}

current_ptr: !byte 0

screencodes:
!for y in range(25) {
    !!utils.debug(["line", y])
    !for x in range(40) {
        ; !!utils.debug((y*CHARSET_WIDTH)+(x % CHARSET_WIDTH))
        !byte (y*CHARSET_WIDTH)+(x % CHARSET_WIDTH)
    }
}

charcolors:
!binary "charcol.bin"

; charset data 
* = $2000
current_charset:
!fill CHARSET_WIDTH, 0

* = $7000
charsets: !binary "charset_40s_5x4_padded.bin"
