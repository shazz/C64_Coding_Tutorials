; opening the top and bottom borders while displaying a pattern in those borders
; original code by pasi 'albert' ojala published in c=hacking issue 6
; ported to bass and simplified by shazz^trsi for educational purpose

IMAGE   = $cf00   ; buffer to copy some character rom data
RASTER  = 250     ; rasterline for the interrupt
DUMMY   = $cfff   ; dummy-address for timing (refer to missing_cycles-article)

        !section "main", $801
        !byte $0b,$08,$01,$00,$9e,str(start)," BY SHAZZ",$00,$00,$00
start:
        ; Copy part of the Charrom in RAM
        lda #$32        ; $32 = 0011 0010: %0xx: character rom visible at $d000-$dfff.
        sta $01         ; character rom is visible on memory map

        ldx #111        ; copy loop = 112 bytes
copy    lda $d000,x     ; copy 112 bytes of character rom (14 uppercase characters, @ to m) from end to start
        sta IMAGE,y     
        iny             
        dex
        bpl copy        ; until we copied enough
        
        lda #$37        ; $37 = 0011 0111 => %1xx: i/o area visible at $d000-$dfff.
        sta $01         ; disable character rom on memory map and vic registers become visible

        ; Set the text at the top and the bottom
	ldx #00 			
writetext_bottom:
        lda msg_bottom,X
	sta $07c0,X	; $07c0 = cell 960 => line 24 of screen mem ($0400-$07e7)
	inx
	cpx #40
        bne writetext_bottom

        ldx #00 
writetext_top:
        lda msg_top,X
	sta $0400,X	; $07c0 = cell 960 => line 24 of screen mem ($0400-$07e7)
	inx
	cpx #40
        bne writetext_top

        ; Set the IRQ
set_irq:
        lda #$7f        ; disable timer interrupts (cia)
        sta $dc0d
        sta $dd0d
        lda #0
        sta $d01a       ; any pending IRQ will trigger here, no need to ACK them 

        lda #<irq
        sta $0314       ; interrupt vector to our routine
        lda #>irq
        sta $0315
        
        lda #RASTER     ; set the raster compare to $fa=250
        sta $d012       

        lda #RASTER-20  ; sprite 0 is situated 20 lines before the interrupt
        sta $d001       ; sprite  0 y = 250-20 = 230th rasterline

        ldy #0
        sty $d017       ; disable sprite y-expand

        lda #$01        
        sta $d015       ; enable sprite (so enable the timing sprite)

        ; to prevent startup glitches wait for the defined rasterline 
        lda #RASTER
wait    cmp $d012
        bne wait

        lda #$01        ; time to enable raster irq ans sprite
        sta $d01a       ; enable raster itnerrupt

        ; loop forever...
forever 
        jmp forever     ; loop forever, an rts will go back to basic but irq still remains.

                        ; irq is triggered on rasterline 250
                        ; at best, 38 cycles have already elapsed before the irq is available to us plus a 0-6 cycles jitter
                        ; let's bet on 3 cycles considering the bne loop
                        ; now we need to open the border and sync (stabilize) the code with the beam for the next rasterline
irq     lda #$13        ; open the bottom border (top border will open too)
        sta $d011       ; $13 = 0001 0011 => set smooth scroll to default 3 pixels, 24 rows, screen on, text mode, no 9th raster bit
        
                        ; 
        ldy #111	; 112 loops
        nop             ; 2 cycles 
                        ; at this point, about (38 + jitter) + 2 + 4 + 2 + 2 = 48 + jitter cycles have be consumed 
                        ; then, we need to reach cycle 58 where the VIC will grab the bus to fetch sprite 0
        inc DUMMY       ; 6 cycles => we are at cycle 54 + jitter!
        ; BUS grabbed by the VIC for 2 cycles at cycle 58, CPU halted => we are at cycle 60
        bit $ea         ; 3 more cycles and done! 63 cycles ! we are in sync!

                        ; loop 112 times = from rasterline 251 to 363 meaning to top raster line 363-312 = 41
                        ; 312 - 284 lines are visible = 28 are not durng vbl times, that about 3.5 characters. 
                        ; Set vice in full border mode to see those missing characters
loop    
        !rept 4 { nop } ; those are 8 cycles are in the left border, you can use do do anything, load register x for example

        lda IMAGE,y     ; get char rom pixel in a. advance also each loop in the character image byte per byte
        sta $3fff       ; loop size = (4x2) + 4 + 4 + (21x2) + 2 + 3 = 63 cycles (pal has 63 cycles per line)

        !rept 21 { nop }; 21 nop (42 cycles) repeat is equivalent to 10 sta $3fff + nop 
                        ; a sta $3fff takes 4 cycles so the pattern can be updated *at best* only every 32 pixels
                  
        dey
        bpl loop        ; this loop is sync'ed with the raster beam and one pass lasts exactly one rasterline

                        ; at this point we are near from the first visible line (top). time to reset the vic to normal
        sta $3fff       ; clear the graphics
        lda #$1b
        sta $d011       ; normal screen (be ready to open the border again)

        lda #1
        sta $d019       ; acknowledge the raster interrupt

        jmp $ea31       ; jump to the normal irq-handler

msg_bottom:
        ; .dc "THIS IS THE LAST LINE BEFORE THE BORDER!"
        !byte 20, 8, 9, 19, 32, 9, 19, 32, 20, 8, 5, 32, 12, 1, 19, 20, 32, 12, 9, 14, 5, 32, 2, 5, 6, 15, 18, 5, 32, 20, 8, 5, 32, 2, 15, 18, 4, 5, 18, 33
        !byte 255

msg_top:
        ; .dc "THIS IS THE FIRST LINE AFTER THE BORDER!"
	!byte 20, 8, 9, 19, 32, 9, 19, 32, 20, 8, 5, 32, 6, 9, 18, 19, 20, 32, 12, 9, 14, 5, 32, 1, 6, 20, 5, 18, 32, 20, 8, 5, 32, 2, 15, 18, 4, 5, 18, 33
        !byte 255        