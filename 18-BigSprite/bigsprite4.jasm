!let debug = 1
; ------------------------------------------------------------------------------------------
; Generic Macros
; ------------------------------------------------------------------------------------------
!include "../macros/macros.jasm"

; ------------------------------------------------------------------------------------------
; Specific Macros
; ------------------------------------------------------------------------------------------
; Declare zero-page offset helper
!let zp = {
	sintab_counter: $03,
    x_positions:    $04,
    y_positions:    $14
}

; ------------------------------------------------------------------------------------------
; Plugins
; ------------------------------------------------------------------------------------------
!use "../macros/utils" as utils
!use "../macros/maths" as maths

; ------------------------------------------------------------------------------------------
; Variables
; ------------------------------------------------------------------------------------------
!let desc = loadJson("data/skull5.json")
!!utils.debug(desc)
!let DATA_FILE = desc.datafile
!let BACK_COLOR = desc.background_color
!let MULTI_COLOR1 = desc.multi_color1
!let MULTI_COLOR2 = desc.multi_color2
!let SPRITE_COLOR = desc.sprite_color
!let SPRITE_COLS = 8
!let SPRITE_ROWS = desc.nb_rows

!let FIRST_IRQ = 10
!let TOP_POS = 50

!let SIN_LEN = 60
!let SIN_SCALE = 30
!let SIN_PAD = 80

!let MUSIC_FILE = "Cybernoid_II.sid"
; ------------------------------------------------------------------------------------------
; Program
; ------------------------------------------------------------------------------------------
+basic_start(entry)
;--------------------------------------------------------------
; Execution starts here
;--------------------------------------------------------------
entry: { 

    lda #BACK_COLOR
    sta vic.bck_col                                 ; set window color to sprite transparent color
    sta vic.border_col                              ; set border color to sprite transparent color

    +clear_screen({"clearByte": $20, "screen": $0400, usePtr: FALSE})

    lda #%00010100                                  ; default: 0001 010 0 => text mem at $1000,    
    sta vic.mem_setup                               ; set Memory setup register to char memory 4 (3 bits $2000-$27FF,) screen memory to 1 ($0400-$07FF)

	lda #0
    sta vic.sprite_dblx  	                        ; no double width
    sta vic.sprite_dblh			                    ; no double height
	sta vic.sprite_pri	        		            ; no priority

    lda #%11111111                                  ; all 8 sprites multicolor
    sta vic.sprite_colmode                          ; single color sprites

    lda #MULTI_COLOR1                               ; set sprite first shared color
    sta vic.sprite_extra_col1

    lda #MULTI_COLOR2                               ; set sprite first shared color
    sta vic.sprite_extra_col2

    lda #SPRITE_COLOR                               ; set sprite specific color
    !for i in range(SPRITE_COLS) {
        sta vic.sprite0_color+i
    }

    lda #TOP_POS
    !for y in range(8) {
        sta vic.sprite0_y+(y*2)                     ; set first y pos
    }    

    lda #(1<<SPRITE_COLS)-1		       
    sta vic.sprite_en		                        ; enable sprites

    sei
    lda #$35        			                    ; Bank out kernal and basic
    sta $01         			                    ; $e000-$ffff

    ; init music
	lda #$00	; a = 0
	tax			; x = 0
	tay			; y = 0    
    jsr $A600	; jump to SID player init

    lda #0
    sta zp.sintab_counter

    ; set all msb to 0 in case of
    !for i in range(8) {
        sta zp.x_positions+(i*2)+1
    }    

    ; set initial positions, first sinus position
    ldx sintab
    !for i in range(8) {
        stx zp.x_positions+(i*2)
        +inc16(zp.x_positions+(i*2), 24*i)
    }

    +setup_irq(irq, FIRST_IRQ)
    cli							                    ; set up irq to replace the kernal IRQ    

forever: 
    jmp forever                                     ; at this point, only IRQs do something
}

; ------------------------------------------------------------------------------------------
; IRQs
; ------------------------------------------------------------------------------------------

; this IRQ will be repeated / modified for each row of sprite (+1 to clear), then setup the next
irq: { 
    !for i in range(SPRITE_ROWS+1) {
        +double_irq(end, irq_stable)                        ; setting the stable IRQ needs 2 rasterlines

    irq_stable:
        txs                                                 ; we're now at cycle 25 (+/- jitter) after txs
        +waste_cycles(33)                                   ; waste 29 to be at cycle 25+33=58 just before the DMA steal

        ; at this point we have a stable IRQ at cycle 14 after the DMA
        +cpu_time_start()

        ; first irq, reset X pos
        !if (i == 0) {
            ldy #0
            ldx zp.sintab_counter
            lda sintab,x     
            !for spr in range(8) {
                sta zp.x_positions+(spr*2)
                sty zp.x_positions+(spr*2)+1
            }
            !for spr in range(8) {
                +inc16(zp.x_positions+(spr*2), 24*spr)
                lda zp.x_positions+(2*spr)
                sta vic.sprite0_x+(2*spr)	
            }
            inx
            cpx #SIN_LEN
            bne cont
            ldx #0
        cont:
            stx zp.sintab_counter

            ; set high byte sprite x
            lda zp.x_positions+(2*7)+1		; get msb7 [6,5,4,3,2,1,0] 
            !for spr in utils.reverse(range(8)) { 	
                asl							; msb << 1
                ora zp.x_positions+(2*spr)+1	; or with msb-1
            }
            sta vic.sprites_x
        }

        ; last row, replace by blank data (here, first one, not that good
        !if (i == SPRITE_ROWS) {
            lda #(sprite_data/64)
            sta $07f8 + 0
            sta $07f8 + 1
            sta $07f8 + 2
            sta $07f8 + 3
            sta $07f8 + 4
            sta $07f8 + 5
            sta $07f8 + 6
            sta $07f8 + 7

            +cpu_time_start()
	        jsr $A603	; call SID player
	        +cpu_time_stop()

            +cpu_time_stop()

            +irq_end(irq, FIRST_IRQ, TRUE)              ; last loop turn, go back to top
        
        ; for other rows
        } else {     
            lda #TOP_POS+(i*21)
            !for y in range(8) {
                sta vic.sprite0_y+(y*2)                 ; adjust next Y positions starting at TOP_POS, +21 pixels,..
            }

            ldx #((sprite_data+($200*i))/64)+4          ; optimized code to set the 8 sprites pointers
            lda #$fb
            sax $07f8 + 0                              
            stx $07f8 + 4   
            inx
            sax $07f8 + 1
            stx $07f8 + 5
            inx
            sax $07f8 + 2
            stx $07f8 + 6
            inx
            sax $07f8 + 3
            stx $07f8 + 7

            +cpu_time_stop()

            !let next_rasterline = TOP_POS+20+(i*20)-3  ; Set next rasterline to the next 20 pixels blocks - 3 to set the stable irq
            !!utils.debug([i, "setting IRQ at", next_rasterline])
            +irq_end(end_loop, next_rasterline, TRUE)       ; jump to next IRQ at rasterline +20. +irq_end generates *+33 bytes
        end_loop:
        }
    end:
    }
}

!let sinvals = maths.sintab(SIN_LEN, SIN_SCALE)
sintab:
!for v in sinvals {
    !!utils.debug([Math.round(SIN_PAD+v)])
    ; !byte Math.round(10+30*(1.0+v))
    !byte Math.round(SIN_PAD+v)
}
end_sintag:

; ------------------------------------------------------------------------------------------
; Segment $2000: displayed sprites, set by vic.mem_setup
; ------------------------------------------------------------------------------------------
* = $2000
sprite_data: !binary DATA_FILE

* = $A600-$7c-2
music:  !binary MUSIC_FILE