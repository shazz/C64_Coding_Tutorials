!let debug = 1
; ------------------------------------------------------------------------------------------
; Generic Macros
; ------------------------------------------------------------------------------------------
!include "../macros/macros.jasm"

; ------------------------------------------------------------------------------------------
; Specific Macros
; ------------------------------------------------------------------------------------------
; Declare zero-page offset helper
!let zp = {
	xsintab_counter:    $03,
    ysintab_counter:    $04,
    x_positions:        $05,    ; 16 bytes
    y_positions:        $15,    ; nb_rows bytes (9)
    irq_lines:          $1E     ; nb_rows bytes (9)
}

; ------------------------------------------------------------------------------------------
; Plugins
; ------------------------------------------------------------------------------------------
!use "../macros/utils" as utils
!use "../macros/maths" as maths
!use "../macros/sid"   as sid_loader

; ------------------------------------------------------------------------------------------
; Variables
; ------------------------------------------------------------------------------------------
!let desc = loadJson("data/skull5.json")
!!utils.debug(desc)
!let sid = sid_loader("Meetro.sid")
!!utils.debug(sid)

!let SPRITE_COLS = 8

!let FIRST_IRQ = 40
!let TOP_POS = 50

; sprite X sine movement
!let SINX_LEN = 60
!let SINX_SCALE = 30
!let SINX_PAD = 80

; sprite Y sine movement
!let SINY_LEN = 40
!let SINY_SCALE = 10
!let SINY_PAD = TOP_POS+SINY_SCALE
; ------------------------------------------------------------------------------------------
; Program
; ------------------------------------------------------------------------------------------
+basic_start(entry)

;--------------------------------------------------------------
; Execution starts here
;--------------------------------------------------------------
entry: { 
    jsr init                                        ; relocated in another segment else music doesn't fit

forever: 
    jmp forever                                     ; at this point, only IRQs do something
}

; ------------------------------------------------------------------------------------------
; IRQs
; ------------------------------------------------------------------------------------------

; this stable IRQ will be repeated / modified for each row of sprite (+1 to clear), then setup the next
irq: { 
    !for i in range(desc.nb_rows+1) {
        +double_irq(end, irq_stable)                        ; setting the stable IRQ needs 2 rasterlines

    irq_stable:
        txs                                                 ; we're now at cycle 25 (+/- jitter) after txs
        +waste_cycles(33)                                   ; waste 29 to be at cycle 25+33=58 just before the DMA steal

        ; at this point we have a stable IRQ at cycle 14 after the DMA
        +cpu_time_start()

        ; first irq, reset X pos
        !if (i == 0) {
            ldx zp.ysintab_counter
            lda ysintab,x

            ; compute IRQ rasterlines based on new top Y
            clc
            adc #20-3
            sta zp.irq_lines
            !for row in range(1, desc.nb_rows) {
                ; clc
                adc #20
                sta zp.irq_lines+row
            }

            ; compute row Y positions
            lda ysintab,x
            !for spr in range(desc.nb_rows) {
                sta zp.y_positions+spr
                ; clc
                adc #21
            }
            inx
            cpx #SINY_LEN
            bne no_reset_y
            ldx #0
        no_reset_y:
            stx zp.ysintab_counter

            ; compute 16bits X positions
            ldy #0
            ldx zp.xsintab_counter
            lda xsintab,x  
            !for spr in range(SPRITE_COLS) {
                sta zp.x_positions+(spr*2)
                sty zp.x_positions+(spr*2)+1
            }
            !for spr in range(SPRITE_COLS) {
                +inc16(zp.x_positions+(spr*2), 24*spr)
                lda zp.x_positions+(2*spr)
                sta vic.sprite0_x+(2*spr)	
            }
            inx
            cpx #SINX_LEN
            bne no_reset_x
            ldx #0
        no_reset_x:
            stx zp.xsintab_counter

            ; set high byte sprite x
            lda zp.x_positions+(2*7)+1		; get msb7 [6,5,4,3,2,1,0] 
            !for spr in utils.reverse(range(SPRITE_COLS)) { 	
                asl							; msb << 1
                ora zp.x_positions+(2*spr)+1	; or with msb-1
            }
            sta vic.sprites_x
        }

        ; last row, replace by blank data (here, first one, not that good
        !if (i == desc.nb_rows) {
            lda #(sprite_data/64)
            sta $07f8 + 0
            sta $07f8 + 1
            sta $07f8 + 2
            sta $07f8 + 3
            sta $07f8 + 4
            sta $07f8 + 5
            sta $07f8 + 6
            sta $07f8 + 7

            +cpu_time_start()
	        jsr sid.play	; call sid player
	        +cpu_time_stop()

            +cpu_time_stop()

            +irq_end(irq, FIRST_IRQ, TRUE)              ; last loop turn, go back to top
        
        ; for other rows
        } else {     
            lda zp.y_positions+i
            !for y in range(SPRITE_COLS) {
                sta vic.sprite0_y+(y*2)                 ; adjust next Y positions starting at TOP_POS, +21 pixels,..
            }

            ldx #((sprite_data+($200*i))/64)+4          ; optimized code to set the sprites pointers
            lda #$fb
            sax $07f8 + 0                              
            stx $07f8 + 4   
            inx
            sax $07f8 + 1
            stx $07f8 + 5
            inx
            sax $07f8 + 2
            stx $07f8 + 6
            inx
            sax $07f8 + 3
            stx $07f8 + 7

            +cpu_time_stop()

            +irq_end(end_loop, zp.irq_lines+i, FALSE)
        end_loop:
        }
    end:
    }
}

!!utils.debug(["end of IRQ code", *])

; ------------------------------------------------------------------------------------------
; Segment $1000: music driver and data
; ------------------------------------------------------------------------------------------
* = sid.startAddress
music:  !byte sid.data
end_music:

; ------------------------------------------------------------------------------------------
; Segment $2000: displayed sprites, set by vic.mem_setup
; ------------------------------------------------------------------------------------------
* = $2000
sprite_data: !binary desc.datafile

; ------------------------------------------------------------------------------------------
; Segment $4000: Init and tables
; ------------------------------------------------------------------------------------------
* = $4000
init: {
    
    lda #desc.background_color
    sta vic.bck_col                                 ; set window color to sprite transparent color
    sta vic.border_col                              ; set border color to sprite transparent color

    +clear_screen({"clearByte": $20, "screen": $0400, usePtr: FALSE})

    lda #%00010100                                  ; default: 0001 010 0 => text mem at $1000,    
    sta vic.mem_setup                               ; set Memory setup register to char memory 4 (3 bits $2000-$27FF,) screen memory to 1 ($0400-$07FF)

	lda #0
    sta vic.sprite_dblx  	                        ; no double width
    sta vic.sprite_dblh			                    ; no double height
	sta vic.sprite_pri	        		            ; no priority

    lda #%11111111                                  ; all sprites multicolor
    sta vic.sprite_colmode                          ; single color sprites

    lda #desc.multi_color1                               ; set sprite first shared color
    sta vic.sprite_extra_col1

    lda #desc.multi_color2                               ; set sprite first shared color
    sta vic.sprite_extra_col2

    lda #desc.sprite_color                               ; set sprite specific color
    !for i in range(SPRITE_COLS) {
        sta vic.sprite0_color+i
    }

    lda #TOP_POS
    !for y in range(SPRITE_COLS) {
        sta vic.sprite0_y+(y*2)                     ; set first y pos
    }    

    lda #(1<<SPRITE_COLS)-1		       
    sta vic.sprite_en		                        ; enable sprites

    sei
    lda #$35        			                    ; Bank out kernal and basic
    sta $01         			                    ; $e000-$ffff

    ; init music
	lda #0
	tax			
	tay			
    jsr sid.init	; jump to sid player init

    lda #0
    sta zp.xsintab_counter
    sta zp.ysintab_counter

    ; set all msb to 0 in case of
    !for i in range(SPRITE_COLS) {
        sta zp.x_positions+(i*2)+1
    }    

    ; set initial positions, first sinus position
    ldx xsintab
    !for i in range(SPRITE_COLS) {
        stx zp.x_positions+(i*2)
        +inc16(zp.x_positions+(i*2), 24*i)
    }

    ; set up initial y postions
    !for i in range(desc.nb_rows) {
        ; !let next_rasterline = TOP_POS+20+(i*20)-3  ; Set next rasterline to the next 20 pixels blocks - 3 to set the stable irq
        lda #TOP_POS+20+(i*20)-3
        sta zp.irq_lines+i
    }    

    +setup_irq(irq, FIRST_IRQ)
    cli							                    ; set up irq to replace the kernal IRQ   

    rts
}

!!utils.debug(["end of INIT code", *])

!let xsinvals = maths.sintab(SINX_LEN, SINX_SCALE)
xsintab:
!for v in xsinvals {
    ; !!utils.debug([Math.round(SINX_PAD+v)])
    !byte Math.round(SINX_PAD+v)
}
end_xsintab:

!let ysinvals = maths.sintab(SINY_LEN, SINY_SCALE)
ysintab:
!for v in ysinvals {
    ; !!utils.debug(["y sin", Math.round(SINY_PAD+v)])
    !byte Math.round(60+v)
}
end_ysintab:

!!utils.debug(["end of tables", *])