!let debug = 0
; ------------------------------------------------------------------------------------------
; Generic Macros
; ------------------------------------------------------------------------------------------
!include "../macros/macros.jasm"

; ------------------------------------------------------------------------------------------
; Specific Macros
; ------------------------------------------------------------------------------------------
; Declare zero-page offset helper
!let zp = {
}

; ------------------------------------------------------------------------------------------
; Plugins
; ------------------------------------------------------------------------------------------
!use "../macros/utils" as utils

; ------------------------------------------------------------------------------------------
; Variables
; ------------------------------------------------------------------------------------------
!let desc = loadJson("data/skull4_i20.json")
!!utils.debug(desc)
!let DATA_FILE = desc.datafile
!let BACK_COLOR = desc.background_color
!let MULTI_COLOR1 = desc.multi_color1
!let MULTI_COLOR2 = desc.multi_color2
!let SPRITE_COLOR = desc.sprite_color
!let SPRITE_COLS = 8
!let SPRITE_ROWS = desc.nb_rows
!let INTERLEAVE = desc.interleave

!let IRQ_RASTERLINE = 10
!let TOP_POS = 50
!let V_SCROLL = 3
!let CYCLES_TO_WASTE = [] 
; ------------------------------------------------------------------------------------------
; Program
; ------------------------------------------------------------------------------------------
+basic_start(entry)
;--------------------------------------------------------------
; Execution starts here
;--------------------------------------------------------------
entry: { 

    sei
    lda #$35        			                    ; Bank out kernal and basic
    sta $01         			                    ; $e000-$ffff
    +setup_irq(irq, IRQ_RASTERLINE)
    cli							                    ; set up irq to replace the kernal IRQ

    lda #%00010100                                  ; default: 0001 010 0 => text mem at $1000,    
    sta vic.mem_setup                               ; set Memory setup register to char memory 4 (3 bits $2000-$27FF,) screen memory to 1 ($0400-$07FF)

    +clear_screen({"clearByte": $20, "screen": $0400, usePtr: FALSE})

	lda #0
    sta vic.sprite_dblx  	                        ; no double width
    sta vic.sprite_dblh			                    ; no double height
	sta vic.sprite_pri	        		            ; no priority

    lda #%11111111                                  ; all 8 sprites multicolor
    sta vic.sprite_colmode                          ; single color sprites

    lda #BACK_COLOR
    sta vic.bck_col                                 ; set window color to charset transparent color
    sta vic.border_col                              ; set border color to charset transparent color

    lda #MULTI_COLOR1                               ; set sprite first shared color
    sta vic.sprite_extra_col1

    lda #MULTI_COLOR2                               ; set sprite first shared color
    sta vic.sprite_extra_col2

    lda #SPRITE_COLOR                               ; set sprite specific color
    !for i in range(SPRITE_COLS) {
        sta vic.sprite0_color+i
    }

    !for x in range(8) {
        lda #80+(x*24)                              ; set fixed x positions (80+24+...)
        sta vic.sprite0_x+(x*2)
    }

    lda #TOP_POS
    !for y in range(8) {
        sta vic.sprite0_y+(y*2)                     ; set first y pos
    }    

	lda #(1<<SPRITE_COLS)-1		       
	sta vic.sprite_en		                        ; enable sprites

forever: 
    jmp forever                                     ; at this point, only IRQs do something
}

; ------------------------------------------------------------------------------------------
; IRQs
; ------------------------------------------------------------------------------------------

; this IRQ will be repeated / modified for each row of sprite, then setup the next
irq: {
    ; by experiment, depending on the badlines, sometimes the number of cycles to start on the 20th line is different
    !if (debug) {
        CYCLES_TO_WASTE = [28, 28, 28, 28, 20, 28, 22, 24, 20] ;;22
    } else {
        CYCLES_TO_WASTE = [34, 34, 34, 34, 26, 34, 28, 30, 26]
    }
    !for i in range(SPRITE_ROWS) {
        +irq_start(end)

        +cpu_time_start()

        lda #TOP_POS+(i*21)
        !for y in range(8) {
            sta vic.sprite0_y+(y*2)                 ; adjust next Y positions starting at TOP_POS, +21 pixels,..
        }

        !!utils.debug(["at row", i, "wasting", CYCLES_TO_WASTE[i], "cycles"])
        +waste_cycles(CYCLES_TO_WASTE[i])

        !for spr in range(SPRITE_COLS) {
            lda #(sprite_data+($200*i)+(spr*64))/64 ; set sprites pointer to next row (one row = 64*8=512=$200 bytes)
            sta $07f8+spr     		
        }

        +cpu_time_stop()

        !if (i == SPRITE_ROWS-1) {
            +irq_end(irq, IRQ_RASTERLINE, TRUE)     ; last loop turn, go back to top
        } else {
            nop                                     ; marker for debugging :)
            !let next_rasterline = 0
            !if (( (TOP_POS+21+(i*21)-1) % 8 == V_SCROLL) | ( (TOP_POS+21+(i*21)-1) % 8 == V_SCROLL+1) ) {
                next_rasterline = TOP_POS+21+(i*21)-2-INTERLEAVE   
            } else {
                next_rasterline = TOP_POS+21+(i*21)-1-INTERLEAVE 
            }

            !!utils.debug([i, "at rasterline", TOP_POS+21+(i*21), "setting IRQ at", next_rasterline, "badline check", (TOP_POS+21+(i*21)-1) % 8])
            +irq_end(*+33, next_rasterline, TRUE)    ; jump to next IRQ at rasterline +20. +irq_end generates 33 bytes
            ; i=0 50+21+0-2-1  = 68 ($44) for y=71 ($47) 
            ; i=1 50+21+21-2-1 = 89 ($59)     y=92 ($5C)
            ;                                  =113  
            ;                                  =134
            ;                                  =155 => badline!
            ;                                  =176
            ;                                  =197
            ;                                  =218

            ; badlines (V_SCROLL = 0)
            ; 48 / 56 / 64 / 72 / 80 / 88 / 96 / 104 / 112 / 120 / 128 / 136 / 144 / 152 / 160 / 168 / 176 / 184 / 192 / 200
            ; 30 / 38 / 40 / 48 / 50 / 58 / 60 / 68  / 70  / 78 /  80  / 88  / 90  / 98  / 100 / 108 / 110 / 118 
        }
    end:
    }
}

; ------------------------------------------------------------------------------------------
; Data
; ------------------------------------------------------------------------------------------

; ------------------------------------------------------------------------------------------
; Segment $2000: displayed sprites, set by vic.mem_setup
; ------------------------------------------------------------------------------------------
* = $2000
; sprite_data: !fill 512, 0
sprite_data: !binary DATA_FILE
